// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Femlae
}

model Admin {
  userId    String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  orgId     Int
  email     String
  password  String
}

model Users {
  userId                       String        @id @default(cuid())
  createdAt                    DateTime      @default(now()) @map("created_at")
  updatedAt                    DateTime      @default(now()) @map("updated_at")
  orgId                        Int
  firstName                    String
  lastName                     String
  middleName                   String
  fatherName                   String
  motherName                   String
  phoneNumber                  String
  whatsappNumber               String
  email                        String
  password                     String
  birthDate                    DateTime
  gender                       Gender
  uniqueId                     String        @unique
  resetPasswordToken           String        @default("")
  resetPasswordTokenExpiration DateTime      @default(now())
  resetEmailToken              String        @default("")
  resetEmailTokenExpiration    DateTime      @default(now())
  Exams                        Exams[]
  AppliedExam                  AppliedExam[]
  Result                       Result[]

  @@index([orgId])
  @@index([firstName, middleName, lastName])
  @@index([firstName, middleName, lastName, phoneNumber])
  @@index([firstName, middleName, lastName, whatsappNumber])
  @@index([firstName, middleName, lastName, phoneNumber, whatsappNumber])
  @@index([resetEmailToken])
  @@index([resetEmailToken, resetPasswordTokenExpiration])
  @@index([resetPasswordToken])
  @@index([resetPasswordToken, resetPasswordTokenExpiration])
}

model Exams {
  examId                   String        @id @default(cuid())
  createdAt                DateTime      @default(now()) @map("created_at")
  updatedAt                DateTime      @default(now()) @map("updated_at")
  examName                 String
  fileUrl                  String
  examDate                 DateTime
  examDurationInHours      Int
  examDescription          String
  examScore                Int
  examLocation             String
  examStatus               String
  examPassingScore         String
  examMaxAttemps           Int
  isActive                 Boolean
  registrationStartingDate DateTime
  registrationClosingDate  DateTime
  resultDate               DateTime?
  recheckingStartingDate   DateTime?
  recheckingClosingDate    DateTime?
  users                    Users         @relation(fields: [createdBy], references: [uniqueId], onDelete: Cascade)
  createdBy                String
  category                 Category
  standard                 Standard
  AppliedExam              AppliedExam[]

  @@index([category])
  @@index([standard])
  @@index([examName, examDate])
  @@index([examStatus])
  @@index([examName, examDate, category, standard])
}

enum Category {
  A
  B
  C
  D
}

enum Standard {
  One   @map("1")
  Two   @map("2")
  Three @map("3")
  Four  @map("4")
  Five  @map("5")
  Six   @map("6")
  Seven @map("7")
  Eight @map("8")
  Nine  @map("9")
  Ten   @map("10")
}

model AppliedExam {
  registrationId String   @id @default(cuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  examId         String
  appliedExam    Exams    @relation(fields: [examId], references: [examId], onDelete: Cascade)
  userId         String
  user           Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  Result         Result[]

  @@index([userId, examId])
  @@index([userId])
  @@index([examId])
}

model Result {
  resultId       String      @id @default(cuid())
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @default(now()) @map("updated_at")
  registrationId String      @unique
  score          Int
  percentage     Float
  appliedExam    AppliedExam @relation(fields: [registrationId], references: [registrationId], onDelete: Cascade)
  creatorId      String
  createdBy      Users       @relation(fields: [creatorId], references: [userId], onDelete: Cascade)

  @@index([registrationId])
  @@index([creatorId])
}
